I. Въведение
1. Тема на проекта
Разработка на софтуерна система за следене на оценки и отсъствия на ученици.
2. Цел на проекта
Да се разработи софтуерно приложение, което предоставя интуитивен и надежден интерфейс за
проследяване на оценки, отсъствия и учебен напредък на ученици, като съхранява данните в
релационна база данни.
3. Обхват на проекта
3.1. Обща цел
Целта на проекта е да се разработи софтуерна система, която интегрира принципите на обектно-
ориентираното програмиране (ООП), работа с бази данни и облачни технологии чрез платформата
Microsoft Azure.
3.2. Технически цели
• Реализация на програмно решение, използвайки обектно-ориентирано програмиране и
принципити към него;
• Интеграция на бази данни за съхранение и управление на данни;
• Използване на облачни технологии за внедряване на база данни.
3.3. Образователни цели
• Придобиване на умения за проектиране и имплементация на софтуерни системи;
• Разбиране и прилагане на основните принципи на ООП (наследяване, полиморфизъм,
капсулация и абстракция);
• Освояване на базови и разширени техники за работа с бази данни;
• Усвояване на работа с облачни платформи като Microsoft Azure.
II. Изисквания към проекта
1. Функционални изисквания
• Трислоен модел (Presentation Layer, Business Logic Layer, Data Access Layer)
• Създаване на интуитивен и лесен за използване интерфейс;
ПРОФЕСИОНАЛНА ГИМНАЗИЯ ПО КОМПЮТЪРНО ПРОГРАМИРАНЕ И ИНОВАЦИИ
б у л . " З а х а р и С т о я н о в " , ж к М е д е н р у д н и к , 8 0 0 9 Б у р г а с , o f f i c e @ c o d i n g b u r g a s . b g , c o d i n g b u r g a s . b g
• Визуализация на данните чрез графики и таблици;
• Създаване на профил за потребители (индивидуална автентикация);
• Реализиране на CRUD операции;
• Извличане на данни в реално време с помощта на конкурентно програмиране;
• Сортиране и филтриране на данните по различни критерии;
• Търсене в базата данни чрез ключови думи или филтри;
• Обработка на множество заявки едновременно с помощта на конкурентно програмиране;
• Автоматично обновяване на информацията в потребителския интерфейс (без презареждане на
страницата);
• Хостване на приложението и/или базата данни в облачна платформа като Azure;
• Защита от атаки като SQL инжекции, XSS и CSRF.
2. Нефункционални изисквания
• Производителност: В процес на работа не възникват функционални изключения;
• Надеждност: Сигурност при съхранение на чувствителни данни;
• Мащабируемост: Използване на Azure за хостинг и управление на данни.
3. Техническа архитектура
Технологии:
• Програмен език: Python;
• Фронтенд: Flask/Django/React/Vue.js/Angular;
• Бази данни: Microsoft SQL Server;
• Облачни услуги: Microsoft Azure (SQL Server for Azure);
• Хранилище: Може да намерите на следния линк в Github.
4. Архитектурен дизайн
• Презентационен слой (Presentation Layer)
Отговаря за взаимодействието с крайния потребител.
Роля:
Събира входни данни от потребителя и представя резултатите, генерирани от бекенда.
• Бизнес слой (Business Logic Layer)
Сърцевината на приложението, която обработва входните данни и изпълнява основната логика.
Роля:
Приема данни от презентационния слой, валидира ги, изпълнява изчисления или други бизнес
процеси и изпраща отговор обратно.
ПРОФЕСИОНАЛНА ГИМНАЗИЯ ПО КОМПЮТЪРНО ПРОГРАМИРАНЕ И ИНОВАЦИИ
б у л . " З а х а р и С т о я н о в " , ж к М е д е н р у д н и к , 8 0 0 9 Б у р г а с , o f f i c e @ c o d i n g b u r g a s . b g , c o d i n g b u r g a s . b g
• Слой за достъп до данни (Data Access Layer)
Отговаря за достъпването и извличането на данни.
Роля:
Достъпва базата данни и предоставя данни на бизнес слоя.
• Клас диаграма (UML Class diagram); - урок за самоподготовка
• Диаграма на случаите на употреба (UML use case diagram); - урок за самоподготовка
• Диаграма на релационни единици (UML entity-relationship diagram); - урок за самоподготовка
• Диаграма на потока (UML sequence diagram). - урок за самоподготовка
5. Тестове
Unit тестове
• Изолираност: Тестваният модул не трябва да зависи от други части на системата;
• Бързина: Юнит тестовете трябва да се изпълняват бързо;
• Повторяемост: Тестовете трябва да дават еднакъв резултат всеки път при същите входни
данни;
• Малки по обхват: Фокусират се върху един метод или функционалност.
6. Работен процес в GitHub
Клони (Branches)
• Main Branch: Основният клон, който съдържа стабилната версия на кода;
• Feature Branches: Отделни клонове за всяка нова функционалност или промяна, напр.
feature/add-calculator;
• Bugfix Branches: За отстраняване на грешки, напр. bugfix/fix-division.
Заявки за сливане (Pull Requests)
• След завършване на работа в branch, се създава Pull Request (PR) в GitHub;
• PR трябва да бъде структуриран и описателен, трябва да спазва добрите практити на
Github;
• Unit тестовете автоматично се визуализират в Github README чрез GitHub Actions.
Проблеми (Issues)
• Документиране на нови функционалности (например "Add user authentication");
• Докладване на грешки (например "Division by zero throws incorrect error");
• Проследяване на подобрения.
ПРОФЕСИОНАЛНА ГИМНАЗИЯ ПО КОМПЮТЪРНО ПРОГРАМИРАНЕ И ИНОВАЦИИ
б у л . " З а х а р и С т о я н о в " , ж к М е д е н р у д н и к , 8 0 0 9 Б у р г а с , o f f i c e @ c o d i n g b u r g a s . b g , c o d i n g b u r g a s . b g
III. Критерии за оценяване
1. Скала за оценяване
• Отличен (90-100 точки): Проектът е напълно завършен, демонстрира високо качество и
оригиналност;
• Много добър (75-89 точки): Проектът е функционален, но с незначителни пропуски или
нужда от подобрения;
• Добър (60-74 точки): Основните изисквания са изпълнени, но има забележими пропуски или
недобра интеграция на компонентите;
• Среден (50-59 точки): Част от функционалностите или изискванията липсват или са
реализирани непълно;
• Слаб (<50 точки): Проектът е непълен или не демонстрира ключови умения.
2. Критерии за оценяване
Критерий Описание Максимален
брой точки
Функционални изисквания Реализация на всички ключови функционалности:
20
CRUD операции, сортиране, филтриране, търсене.
Интуитивност на интерфейса.
Нефункционални изисквания Гарантирано качество на системата: производителност,
надеждност и мащабируемост.
Реализация на защита от атаки като SQL injection.
10
Техническа архитектура Използване на подходящи технологии (Python/Java, SQL
15
Server, Azure).
Добре структурирана техническа документация.
Архитектурен дизайн Имплементация на трислоен модел.
Създаване на UML диаграми (класове, случаи на
употреба, релации, потоци).
20
6. Тестове Създаване на юнит тестове, покриващи основните
10
методи и функционалности.
Тестовете трябва да са изолирани, бързи и повторяеми.
7. Работен процес в GitHub Работа с клони (branches) и заявки за сливане (pull
requests).
Правилно документиране на задачите чрез Issues.
Интеграция на GitHub Actions.
15
8. Презентация на проекта - Добре оформено README с описание на проекта,
10
инструкции за инсталиране и таблица с резултати от
тестовете.